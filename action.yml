name: Release Conan

inputs:
  name:
    description: Component name
    required: true
  version:
    description: Component version
    required: true
  directory:
    description: Directory containing the component to build
    required: true
  configure-preset: 
    description: Preset to configure the component
    required: true
  build-preset: 
    description: Preset to build the component
    required: true
  create-conan-package:
    description: Flag to create a Conan package
    default: true
  conan-username:
    description: Conan username for library repository
    required: true
  conan-api-key:
    description: Conan API key for library repository
    required: true

runs:
  using: composite

  steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Restore CCache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ github.job }}

    - name: Restore Conan Package Cache
      uses: actions/cache@v4
      with:
        path: ~/.conan/data
        key: conan-${{ runner.os }}-${{ hashFiles('**/conanfile.py') }}

    - name: Restore APT Cache
      uses: actions/cache@v4
      if: runner.os == 'Linux'
      with:
        path: |
          /var/cache/apt/
          /var/lib/apt/
        key: apt-${{ runner.os }}-${{ github.job }}

    - name: Set Up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install and Configure pipx
      run: |
        python -m pip install --user pipx
        python -m pipx ensurepath
      shell: bash

    - name: Install Conan and CMake via pipx
      run: |
        pipx install cmake
        pipx install conan
      shell: bash

    - name: Install Build Tools (Linux)
      if: runner.os == 'Linux'
      run: sudo apt install -y build-essential ninja-build
      shell: bash

    - name: Install Build Tools (macOS)
      if: runner.os == 'macOS'
      run: brew install ninja
      shell: bash

    - name: Configure Conan Remote Repository
      run: |
        cd ${{ inputs.directory }}
        conan profile detect
        conan remote add ostis-ai https://conan.ostis.net/artifactory/api/conan/ostis-ai-library/
      shell: bash

    - name: Install C++ Dependencies
      run: |
        cd ${{ inputs.directory }}
        conan install . --build=missing
      shell: bash

    - name: Build Component
      run: |
        cd ${{ inputs.directory }}
        cmake --preset ${{ inputs.configure-preset }}
        cmake --build --preset ${{ inputs.build-preset }}
      shell: bash

    - name: Export Component
      if: ${{ inputs.create-conan-package }}
      run: |
        cd ${{ inputs.directory }}
        conan remote login ostis-ai ${{ inputs.conan-username }} -p ${{ inputs.conan-api-key }}
        conan export-pkg .
      shell: bash

    - name: Upload to Conan remote
      if: ${{ inputs.create-conan-package }}
      run: |
        cd ${{ inputs.directory }}
        conan upload ${{ inputs.name }}/${{ inputs.version }} -r ostis-ai
      shell: bash
    
    - name: Create Archive
      run: |
        cd ${{ inputs.directory }}/build/Release
        cpack -G TGZ
      shell: bash

    - name: Get Release Info by Tag
      id: get_release
      uses: joutvhu/get-release@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        tag_name: ${{ inputs.version }}

    - name: Get Archive Filename
      id: get_archive_filename
      run: |
        cd ${{ inputs.directory }}/build/Release
        ARCHIVE_FILE=$(ls ${{ inputs.name }}-*.tar.gz)
        echo "Found archive: $ARCHIVE_FILE"
        echo "archive_path=$(realpath $ARCHIVE_FILE)" >> $GITHUB_OUTPUT
        echo "archive_name=$ARCHIVE_FILE" >> $GITHUB_OUTPUT
      shell: bash

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }}
        asset_path: ${{ steps.get_archive_filename.outputs.archive_path }}
        asset_name: ${{ steps.get_archive_filename.outputs.archive_name }}
        asset_content_type: application/gzip
